# Файл docker-compose должен начинаться с тега версии.
# Мы используем "3" так как это - самая свежая версия на момент написания этого кода.
version: "3"

# Следует учитывать, что docker-composes работает с сервисами.
# 1 сервис = 1 контейнер.
# Сервисом может быть клиент, сервер, сервер баз данных...
# Раздел, в котором будут описаны сервисы, начинается с 'services'

services:

  # нам нужно два сервиса.
  # Первый сервис (контейнер): контейнер из 5 части.
  # Назвать его можно так, как нужно разработчику.
  # Понятное название сервиса помогает определить его роль.
  # Здесь мы, для именования соответствующего сервиса, используем ключевое слово 'server'.
  server:
    container_name: fcgi_hello
 
    # Ключевое слово "build" позволяет задать
    # путь к файлу Dockerfile, который нужно использовать для создания образа,
    # который позволит запустить сервис.
    # Здесь '.' соответствует пути к Dockerfile ,т.е текущий.
    build: .

  # Второй сервис (контейнер): proxy.
  proxy:
    container_name: proxy

    # Здесь 'context: .' соответствует пути к папке, которая содержит
    # файл 'dockerfile: Dockerproxy' для создания proxy к сервису fcgi_hello
    build:
      context: .
      dockerfile: Dockerproxy

    # Если мы хотим обратиться к серверу с нашего компьютера (находясь за пределами контейнера),
    # мы должны организовать перенаправление этого порта на порт компьютера.
    # Сделать это нам поможет ключевое слово 'ports'.
    # При его использовании применяется следующая конструкция: [порт компьютера]:[порт контейнера]
    # В нашем случае нужно использовать порт компьютера 80 и организовать его связь с портом
    # 8080 контейнера (так как именно на этот порт сервер ожидает поступления запросов).
    ports:
      - 80:8080
